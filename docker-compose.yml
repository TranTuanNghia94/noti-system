version: '3.8'

services:
  # API Gateway
  kong:
    image: kong:latest
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: "bundled,key-auth"
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ./kong/kong.yml:/usr/local/kong/kong.yml:ro
    networks:
      - notification-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Message Broker
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - notification-network
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - notification-network

  # Database
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    env_file:
      - .env
    volumes:
      - mongodb_data:/data/db
      - ./mongodb-init/mongo-init.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    environment:
      MONGO_INITDB_DATABASE: notification_db
    networks:
      - notification-network
    command: mongod --bind_ip_all


  # Notification Service
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    env_file:
      - ./mongodb-init/.env
    environment:
      - NODE_ENV=development
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      - mongodb
      - kafka
    networks:
      - notification-network

  # Email Service
  email-service:
    build:
      context: ./email-service
      dockerfile: Dockerfile
    env_file:
      - ./mongodb-init/.env
    environment:
      - NODE_ENV=development
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      - kafka
      - mongodb
    networks:
      - notification-network

  # Telegram Service
  telegram-service:
    build:
      context: ./telegram-service
      dockerfile: Dockerfile
    env_file:
      - ./mongodb-init/.env
    environment:
      - NODE_ENV=development
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      - kafka
      - mongodb
    networks:
      - notification-network

networks:
  notification-network:
    driver: bridge

volumes:
  mongodb_data: